@use 'sass:map';
@use 'sass:math';
@use 'src/scss/vars';

* {
	background: transparent;
	border: 0;
	border-collapse: collapse;
	border-spacing: 0;
	color: inherit;
	font-family: inherit;
	font-size: inherit;
	font-style: inherit;
	font-weight: inherit;
	list-style: none;
	margin: 0;
	padding: 0;
	text-decoration: inherit;
}

:root {
	@include vars.type(body);
	@include vars.text--smooth;

	@media print {
		@include vars.text--print;
	}

	font-size: vars.$font-size--base + px;

	--content-padding-y: calc(#{vars.$height--nav} + var(--content-gutter-y));
	@include vars.if-viewport('<', lg) {
		--content-gutter-y: 10px;
	}

	@include vars.if-viewport('>=', lg) {
		--content-gutter-y: 40px;
	}

	@include vars.if-viewport('==', sm) {
		--content-gutter-x: 30px;
	}

	@include vars.if-viewport('>', sm) {
		--content-gutter-x: 50px;
	}

	@include vars.if-viewport('<', xl) {
		--content-padding-x: var(--content-gutter-x);
	}

	@include vars.if-viewport('>=', xl) {
		--content-padding-x: calc((.5 * (100vw - #{vars.bp(xl)})) + var(--content-gutter-x));
	}
}

h1,
h2,
h3,
h4,
h5,
h6 {
	clear: both;

	em {
		color: vars.$color--brand;

		.text--on-dark & {
			color: vars.$color--brand--offset--sink;
		}
	}
}

// TODO2: Move to text-defaults
h1,
h2,
h3,
h4,
h5,
h6,
p {
	&:not(:last-child) {
		margin-bottom: vars.$margin--text--y;
	}
}

a {
	@include vars.text__underline;

	font-weight: 700;
	transition: color .2s, text-shadow .2s;

	.text--on-dark & {
		color: vars.$color--text--on-dark;

		&:hover {
			text-shadow: 0 0 1px vars.$color--text--on-dark;
		}
	}

	&,
	.text--on-light & {
		color: vars.$color--brand--sink;

		&:hover {
			color: vars.$color--brand;
		}
	}
}

aside {
	@include vars.type(small);
}

b {
	display: inline-block; // For preventing text from wrapping within key phrases
}

.bg {
	background-size: cover;
	object-fit: cover;
	overflow: hidden;
	z-index: vars.z(underlay);

	&,
	img {
		@include vars.expand;
	}

	img {
		object-fit: inherit;
		object-position: inherit;
	}
}

button {
	cursor: pointer;
}

.button,
.buttonset > * {
	@include vars.button;
	@include vars.button--default;

	@media print {
		display: none !important;
	}
}

.button {
	&--hero {
		@include vars.button;
		@include vars.button--hero;
	}

	&--high {
		@include vars.button;
		@include vars.button--high;
	}

	&--icon {
		@include vars.button--icon;
	}

	&--low {
		@include vars.button;
		@include vars.button--low;
	}

	&--transparent {
		@include vars.button;
		@include vars.button--low;

		background-color: transparent;
	}
}

.buttonset {
	display: flex;
	flex-wrap: wrap;

	& > * {
		@include vars.space-between(5px, (property: margin));

		margin-bottom: 5px;
	}
}

.flex {
	display: flex;

	&--center {
		justify-content: center;
	}
}

.flex-spacer {
	flex-grow: 1;
}

form {
	display: block;
}

.hero {
	min-height: calc(100vh - #{vars.$height--nav});

	@media print {
		height: auto;
	}

	@include vars.if-viewport('>=', lg) {
		max-height: 900px;
	}
}

.hidden {
	height: 0;
	opacity: 0;
	position: absolute;
	width: 0;
}

hr {
	border: 0;
	clear: both;
	display: block;
	height: 1px;
	margin: vars.$margin--text--y auto;
	width: 100%;

	&.fancy {
		animation: hr-fancy 1.5s ease-in-out;
		animation-play-state: paused;
		background-image: linear-gradient(to right, vars.$color--brand, vars.$color--bg 80%, transparent 100%);
		height: 3px;
		margin-left: 0;

		[data-viewport-visible='true'] & {
			animation-play-state: running;
		}

		@keyframes hr-fancy {
			from {
				width: 0;
			}

			to {
				width: 100%;
			}
		}
	}
}

img {
	content: none !important;
	display: block;
	height: auto;
	max-width: 100%;
	object-fit: contain;
	object-position: center;
}

input {
	box-sizing: border-box;
	display: block;
	width: 100%;
}

.icon {
	&--bounce {
		&::before {
			@include vars.bounce((
				bounciness: .6,
				delay--after: 3,
				delay--before: 3,
				distance: 10px,
				distance--min: 2px,
				duration: .2,
				property: bottom,
			));

			position: relative;
		}
	}

	&--open {
		&::before {
			content: '\0203A';
			font-size: #{math.div(50, 32)}em;
			margin-bottom: #{math.div(5, 32)}em;
			margin-right: 1ex;
		}
	}
}

.link {
	&--outline {
		align-items: center;
		border: 2px solid vars.$color--brand--offset--sink;
		border-radius: 25px;
		box-sizing: border-box;
		display: flex;
		height: 50px;
		margin-bottom: 1em;
		padding-left: 2ex;
		text-decoration: none;
		transition: border-color .2s, color .2s;

		&:hover {
			border-color: vars.$color--brand--sink;
		}
	}
}

.list {
	&--dotted {
		@include vars.list--dotted((
			border__color: vars.$color--bg--offset--sink,
			dot__background: vars.$color--bg,
			dot__color: vars.$color--brand,
		));
	}

	&--inline--links {
		a + a::before {
			color: vars.$color--text;
			content: '| ';
			display: inline-block;
			font-weight: normal;
			text-decoration: none;
			white-space: pre;
		}
	}
}

.material-icons {
	font-size: inherit;
	line-height: inherit;
	vertical-align: text-bottom;

	a & {
		vertical-align: middle;
	}
}

.overlay {
	backdrop-filter: blur(3px);
	background-color: vars.$color--overlay;
	border-radius: 10px;
	box-sizing: border-box;
	padding: var(--content-padding-y) var(--content-gutter-x);

	&--left {
		border-bottom-left-radius: 0;
		border-top-left-radius: 0;
	}

	&--right {
		border-bottom-right-radius: 0;
		border-top-right-radius: 0;
	}
}

.section {
	box-sizing: border-box;
	overflow: hidden;
	padding: var(--content-padding-y) var(--content-padding-x);
	position: relative;
	width: 100%;

	&--columns {
		padding: 0;

		> .bg {
			padding: 0;
		}

		> * {
			box-sizing: border-box;
			padding: var(--content-padding-y) var(--content-padding-x);
		}

		@include vars.if-viewport('<', lg) {
			display: grid;
			grid-row-gap: var(--content-gutter-y);
			grid-template-rows: repeat(1, minmax(0, 1fr));

			> * {
				width: 100%;
			}

			&:not(&--reverse-sm) {
				> :nth-child(1) {
					padding-bottom: 0;
				}

				> :nth-child(2) {
					padding-top: 0;
				}
			}

			&--reverse-sm {
				> :nth-child(1) {
					padding-top: 0;
				}

				> :nth-child(2) {
					order: -1;
					padding-bottom: 0;
				}
			}
		}

		@include vars.if-viewport('>=', lg) {
			align-items: center;
			display: grid;
			grid-column-gap: var(--content-gutter-x);
			grid-template-columns: repeat(2, minmax(0, 1fr));

			> :nth-child(1) {
				padding-right: 0;
			}

			> :nth-child(2) {
				padding-left: 0;
			}
		}
	}

	&--overlay {
		align-items: center;
		display: flex;
		padding-left: 0;
		padding-right: 0;

		.overlay {
			&--center {
				@include vars.if-viewport('<', lg) {
					margin-left: var(--content-padding-x);
					margin-right: var(--content-padding-x);
				}

				@include vars.if-viewport('>=', lg) {
					flex-shrink: 0;
					margin-left: auto;
					margin-right: auto;
					max-width: calc(100vw - (2 * var(--content-padding-x)));
					width: 60%;
				}
			}

			&--left,
			&--right {
				flex-shrink: 0;

				@include vars.if-viewport('<', lg) {
					width: calc(100vw - var(--content-padding-x));
				}

				@include vars.if-viewport('>=', lg) {
					width: 60%;
				}
			}

			&--left {
				padding-left: var(--content-padding-x);
			}

			&--right {
				padding-right: var(--content-padding-x);
			}
		}
	}
}

small {
	@include vars.type(small);
}

strong {
	font-weight: 700;
}

sup {
	font-size: .4em;
}

summary {
	&::marker,
	&::-webkit-details-marker {
		display: none;
	}
}

.text {
	@each $typefaceName, $typeface in vars.$typefaces {
		&--#{$typefaceName} {
			@include vars.type($typefaceName);
		}
	}

	&--center {
		text-align: center;
	}

	&--on-dark {
		color: vars.$color--text--on-dark;
	}

	&--on-light {
		color: vars.$color--text;
	}
}

.text-defaults {
	h1 {
		@include vars.type(hdg--1);
	}

	h2 {
		@include vars.type(hdg--2);
	}

	h3 {
		@include vars.type(hdg--3);
	}

	h4 {
		@include vars.type(hdg--4);
	}

	ol,
	ul {
		margin-left: 3ex;

		li {
			list-style-position: outside;
		}
	}

	ol li {
		list-style-type: roman;
	}

	ul li {
		list-style-type: disc;
	}

	li,
	ol,
	ul,
	p {
		margin-bottom: 1em;
		margin-top: 1em;
	}

	figure,
	table {
		background-color: vars.$color--bg--offset;
		border: 1em solid transparent;
		box-shadow: 0 0 0 1px vars.$color--shadow--sink;
		margin: 1em auto;
	}

	figure {
		@include vars.if-viewport('>=', lg) {
			width: 40%;
		}
	}

	figcaption {
		@include vars.type(small);

		padding-top: 1em;
		text-align: center;
	}

	hr {
		margin: 2em auto;
	}

	table {
		@include vars.type(small);

		td,
		th {
			padding-bottom: 5px;
			padding-top: 5px;
			vertical-align: top;
			white-space: pre-line;

			&:not(:last-child) {
				padding-right: 20px;
			}
		}

		thead {
			td,
			th {
				font-weight: bold;
			}

			tr {
				border-bottom: 1px solid black;
			}
		}

		tbody {
			tr {
				border-bottom: 1px solid vars.$color--shadow;
			}
		}

		caption {
			caption-side: bottom;
			padding-top: .5em;
		}
	}
}
