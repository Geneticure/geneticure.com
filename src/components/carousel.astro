---
import { getProps } from 'src/js/astro';

const { props, rest } = getProps(Astro.props, {
	id: `carousel`
});
---

<div
	class={`_carousel ${props.class}`}
	data-carousel
	id={props.id}
	{...rest}
>
	<button
		aria-hidden="true"
		class="_carousel__arrow"
		data-toggle-trigger={props.id}
		data-toggle-index="-1"
	>
		&lsaquo;
	</button>

	<button
		aria-hidden="true"
		class="_carousel__arrow"
		data-toggle-trigger={props.id}
		data-toggle-index="+1"
	>
		&rsaquo;
	</button>

	<div class="_carousel__body">
		<div
			class="_carousel__slides"
			data-carousel-slides
			id={`${props.id}__slides`}
		>
			<slot />
		</div>

		<p
			aria-hidden="true"
			class="_carousel__toggles"
			data-carousel-toggles
		>
			<template data-carousel-toggle>
				<button
					data-toggle-trigger={props.id}
				></button>
			</template>
		</p>
	</div>
</div>

<style lang="scss">
@use 'src/scss/vars';

._carousel {
	position: relative;

	&__arrow {
		align-items: center;
		color: rgba(0 0 0 / .3);
		display: flex;
		flex-shrink: 0;
		font-size: 100px;
		height: 100%;
		justify-content: center;
		line-height: 0;
		position: absolute;
		transition: color .2s;
		width: var(--content-gutter-x);

		&:hover {
			color: rgba(0 0 0 / .6);
		}

		&:first-of-type {
			right: 100%;
		}

		&:last-of-type {
			left: 100%;
		}
	}

	&__body {
		display: flex;
		flex-direction: column;
		flex-grow: 1;
		height: 100%;
		justify-content: space-between;
		position: relative;
	}

	&__slides {
		display: flex;
		flex-wrap: nowrap;
		overflow: hidden;

		> :global(*) {
			flex-shrink: 0;
			width: 100%;

			&:first-child {
				--slide-index: 0;

				margin-left: calc(var(--slide-index) * -100%);
				transition: margin-left .5s;
			}

			&:not(.toggle--on) {
				visibility: hidden;
			}
		}
	}

	&__toggles {
		display: flex;
		height: 100%;
		justify-content: center;
		margin-top: 10px;

		button {
			font-size: 0;
			padding: 15px;

			&::after {
				background-color: rgba(0 0 0 / .3);
				transition: background-color .2s;

				@include vars.encircle(5px);
			}

			&:hover::after {
				background-color: rgba(0 0 0 / .6);
			}

			&.toggle--on::after {
				background-color: vars.$color--brand;
			}
		}
	}
}
</style>

<script>
import * as Toggle from 'src/js/toggle';

const ATTR__CAROUSEL = `data-carousel`;
const ATTR__CAROUSEL__TOGGLE_WRAP = `data-carousel-toggles`;
const ATTR__CAROUSEL__TOGGLE_TEMPLATE = `data-carousel-toggle`;
const ATTR__CAROUSEL__SLIDE_WRAP = `data-carousel-slides`;

const $carousels = Array.from(document.querySelectorAll(`[${ATTR__CAROUSEL}]`));
for (const $carousel of $carousels) {
	carouselSetup($carousel);
}

function carouselSetup($carousel: Element) {
	const carouselId = $carousel.getAttribute(`id`);
	const $toggleWrap = $carousel.querySelector(`[${ATTR__CAROUSEL__TOGGLE_WRAP}]`);
	const $toggleTemplate = $toggleWrap.querySelector(`[${ATTR__CAROUSEL__TOGGLE_TEMPLATE}]`) as HTMLTemplateElement;
	$toggleTemplate.remove();

	const $slideWrap = $carousel.querySelector(`[${ATTR__CAROUSEL__SLIDE_WRAP}]`);
	const $slides = Array.from($slideWrap.children);

	$slides.forEach(($slide, index) => {
		$slide.setAttribute(Toggle.ATTR__TARGET, carouselId);
		$slide.setAttribute(Toggle.ATTR__INDEX, index.toString());

		const $toggle = ($toggleTemplate.content.cloneNode(true) as Element).querySelector(`[${Toggle.ATTR__TRIGGER}]`);
		$toggle.setAttribute(Toggle.ATTR__TRIGGER, carouselId);
		$toggle.setAttribute(Toggle.ATTR__INDEX, index.toString());
		$toggle.innerHTML = `#${index}`;
		$toggleWrap.appendChild($toggle);
	});

	const $slideAnchor = $slides[0] as HTMLElement;
	$slideAnchor.setAttribute(Toggle.ATTR__TARGET__ISDEFAULT, `1`);

	Toggle.toggleSetup($carousel);
}

document.addEventListener(Toggle.ToggleEvents.end, (event: CustomEvent) => {
	const detail = event.detail as Toggle.ToggleEndEvent;
	const $slidesContainer = document.getElementById(`${detail.id}__slides`);
	if (!$slidesContainer) {
		return;
	}
	const $slides = Array.from($slidesContainer.children);
	const $slide = $slides[0] as HTMLElement;
	$slide.style.setProperty(`--slide-index`, detail.state.index.toString());
});

</script>
