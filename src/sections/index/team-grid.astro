---
import Img_ from 'src/components/img.astro';
import Route_ from 'src/components/route.astro';

import { getProps } from 'src/js/astro';

import { team } from 'src/text/team';

const { props, rest } = getProps(Astro.props);
---

<ul
	class={`text--small _team-grid ${props.class}`}
	{...rest}
>
	{
		team.map((person) =>
			<li
				class="_person"
				data-person
				tabindex={0}
			>
				<div class="_person__header">
					<span class="_person__img">
						<Img_
							alt={person.title}
							bgColor={false}
							src={person.img}
						/>
					</span>
					<h3 class="_person__name">{person.name}</h3>
					<p class="_person__title">{person.titleAbbr}</p>
				</div>

				<div class="_person__body">
					<template>
						<p>
							{person.description}
							{
								person.social.map((social) =>
									<Route_
										class="_person__social"
										href={social.href}
									>
										<Img_
											alt={`${social.title} account for ${person.name}`}
											class="_person__social__icon"
											lazy={false}
											src={social.img}
										/>
									</Route_>,
								)
							}
						</p>
					</template>
				</div>
			</li>,
		)
	}
	<li class="_team-grid__rest">
		<Route_ to="company">See our full team &rsaquo;</Route_>
	</li>
</ul>

<style lang="scss">
@use 'src/scss/vars';

._team-grid {
	display: grid;
	grid-column-gap: 10px;
	grid-template-columns: repeat(var(--team-columns), minmax(0, 1fr));
	position: relative;

	&__rest {
		align-items: center;
		display: flex;
		justify-content: center;

		a {
			font-weight: normal;

			.icon {
				text-decoration: none;
			}
		}
	}
}


$person__bg: vars.$color--bg;
$person__border__color: vars.$color--brand;
$person__border__radius: 10px;
$person__border__width: 2px;
$person__img__diameter: 100px;
$person__z: 9;

._person {
	outline: none;

	&::after {
		@include vars.expand;

		background-color: vars.$color--shadow;
		display: none;
		opacity: 0;
		position: fixed;
		transition: opacity .2s;
		z-index: vars.z(underlay);

		:global(.section[data-viewport-visible='true']) & {
			display: block;
		}
	}

	&:focus,
	&:focus-within {
		&::after {
			opacity: 1;
		}
	}

	&__body {
		background: $person__bg;
		border-radius: $person__border__radius;
		border-top: $person__border__width solid $person__border__color;
		box-shadow: 0 0 50px 20px #00001020;
		box-sizing: border-box;
		left: 0;
		margin-top: 5px;
		padding: 20px;
		position: absolute;
		width: 100%;
		z-index: 8;

		._person:not(:focus, :focus-within) & {
			display: none;
		}
	}

	&__header {
		align-items: center;
		border-bottom: $person__border__width solid transparent;
		border-radius: $person__border__radius;
		box-sizing: border-box;
		color: inherit;
		cursor: pointer;
		display: flex;
		flex-direction: column;
		font-weight: inherit;
		padding: 20px 10px 10px;
		position: relative;
		text-align: center;
		text-decoration: none;

		> * {
			margin: 0;
		}

		._person:focus &,
		._person:focus-within & {
			background-color: $person__bg;
			border-bottom-color: $person__border__color;
			z-index: 9;
		}
	}

	&__img {
		background-color: vars.$color--brand--offset;
		border-radius: 50%;
		display: block;
		flex-shrink: 0;
		height: $person__img__diameter;
		overflow: hidden;
		transition: background-color .2s;
		width: $person__img__diameter;

		:global(img) {
			mix-blend-mode: multiply;

			._person:focus &,
			._person:focus-within & {
				filter: sepia(.2);
			}
		}

		._person:hover & {
			background-color: vars.$color--brand--offset--sink;
		}

		._person:focus &,
		._person:focus-within & {
			background-color: #FFFFFF;
		}
	}

	&__name {
		flex-wrap: nowrap;
		margin-bottom: .5em !important;
	}

	&__social {
		display: inline-block;
		height: 15px;
		position: relative;
		top: 2px;

		&__icon {
			height: 100%;
			width: auto;
		}
	}

	&__title {
		color: vars.$color--brand--sink;
	}
}
</style>

<script>
import * as Templates from 'src/js/templates';

const $people = Array.from(document.querySelectorAll(`[data-person]`));
for (const $person of $people) {
	$person.addEventListener(`focus`, renderPerson);
}

function renderPerson() {
	const $person = this as HTMLElement;
	const $template = $person.querySelector(`template`);
	Templates.render($template);
}
</script>
